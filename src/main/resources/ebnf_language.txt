program
	: package_statement 
	  import_statement* 
	  top_level_declaration*

package_statement = identifier (DOT identifier)*
import_statement = IMPORT identifier (DOT identifier)*

top_level_declaration = (function_declaration | structure_declaration)

function_declaration = FUN identifier parameter_list? SEMICOLON type (block | ASSIGN expression)
parameter_list = OPEN_ROUND_BR (function_parameter (COMMA function_parameter))? CLOSE_ROUND_BR 
function_parameter = identifier SEMICOLON type (ASSIGN expression)?
block = OPEN_CURLY_BR expression* CLOSE_CURLY_BR

structure_declaration = STRUCT identifier (SEMICOLON inheritance_list)? (parameter_list)? 
inheritance_list = SEMICOLON identifier (COMMA identifier)* 

expression = 
	: conditional_expression 
	| number 
	| boolean 
	| function_call 
	| getter 
	| structure_constructor 
	| list 
	| string 
	| identifier

conditional_expression = IF function_call expression (ELSE expression)?

list = OPEN_SQUARE_BR expression (COMMA expression)* CLOSE_SQUARE_BR
  | OPEN_SQUARE_BR CLOSE_SQUARE_BR

function_call = identifier ( OPEN_ROUND_BR parameter_expression* CLOSE_ROUND_BR )?
structure_constructor = identifier ( OPEN_ROUND_BR parameter_expression* CLOSE_ROUND_BR )? 

parameter_expression = (identifier ASSIGN)? expression

getter = identifier OPEN_SQUARE_BR (identifier | number) CLOSE_SQUARE_BR

functional_type = type ARROW type
structure_type = identifier

boolean = 'true' | 'false'

type = 
	: bracket_type
	|'list'
	| functional_type
	| structure_type
	| 'number'
	| 'string'
	| 'bool'
	| 'unit'

bracket_type = OPEN_ROUND_BRACKET type CLOSE_ROUND_BRACKET

identifier = letter (letter|digit|UNDERSCORE)*

string = QUOTE (line_string_content | line_string_expression)* QUOTE
line_string_expression = DOLLAR OPEN_CURLY_BR expression CLOSE_CURLY_BR  
line_string_content = digit | char

number = (MINUS)? digit+ (DOT digit+)?

char = [a-zA-Z]
digit = '0'..'9'
MINUS = '-'

OPEN_ROUND_BR = '('
CLOSE_ROUND_BR = ')'
OPEN_SQUARE_BR = '['
CLOSE_SQUARE_BR = ']'
OPEN_CURLY_BR = '{'
CLOSE_CURLY_BR = '}'

ARROW = '->'

IMPORT = 'import'
FUN = 'fun'
STRUCT = 'struct'

IF = 'if'
ELSE = 'else'

ASSIGN = '='

COMMA = ','
DOT = '.'
SEMICOLON = ':'
QUOTE = '"'

DOLLAR = '$'
UNDERSCORE = '_'
